/**
 * Client that connects to a Passport server and provides access to the full set of Passport APIs.
 *
 * @author Brian Pontarelli
 */
public class PassportClient {

  public final Consumer<ClientResponse<?, ?>> errorConsumer;

  public final Function<ClientResponse<?, ?>, ?> successFunction;

  private final String apiKey;

  private final String baseURL;

  public int connectTimeout = 2000;

  public int readTimeout = 2000;

  public PassportClient(String apiKey, String baseURL) {
    this.apiKey = apiKey;
    this.baseURL = baseURL;
    this.errorConsumer = null;
    this.successFunction = null;
  }

  public PassportClient(String apiKey, String baseURL, Function<ClientResponse<?, ?>, ?> successFunction,
                        Consumer<ClientResponse<?, ?>> errorConsumer) {
    this.apiKey = apiKey;
    this.baseURL = baseURL;
    this.successFunction = successFunction;
    this.errorConsumer = errorConsumer;
  }

  <% apis.each do |api| %>
  /**
   * <%= api['comment'].scan(/\w+.{1,120}/).join("\n   * ")  %>
   *
<% api['params'].each do |param| -%>
   * @param <%= param['name'] %> <%= param['comment'].scan(/\w+.{1,110}/).join("\n   *                ") %>
<% end -%>
   * @return When successful, the response will contain the log of the action. If there was a validation error or any
   * other type of error, this will return the Errors object in the response. Additionally, if Passport could not be
   * contacted because it is down or experiencing a failure, the response will contain an Exception, which could be an
   * IOException.
   */
  public ClientResponse<<%= api['successResponse'] %>, <%= api['errorResponse'] %>> <%= api['methodName'] %>>(UUID actioneeUserId, ActionRequest request) {
    return start(ActionResponse.class).uri("<%= api['uri'] %>")
                                       <% api['params'].each do |param| -%>
                                         <% if param['type'] == 'urlSegment' %>
                                      .urlSegment(<%= param['name'] %>)
                                        <% elsif param['type'] == 'body' %>
                                      .bodyHandler(new JSONBodyHandler(<%= param['name'] %>, objectMapper))
                                         <% end -%>
                                       <% end %>
                                      .<%= api['method'] %>()
                                      .go();
  }
  <% end %>

}