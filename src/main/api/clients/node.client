/*
 * Copyright (c) 2016-2017, Inversoft Inc., All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

'use strict';

const RESTClient = require('./RESTClient.js');
require('promise');

const PassportClient = function(apiKey, host) {
  this.apiKey = apiKey;
  this.host = host;
};

PassportClient.constructor = PassportClient;
//noinspection JSUnusedGlobalSymbols
PassportClient.prototype = {

<% apis.each { api -> %>  /**
<% api['comments'].each { comment -> %>   * <%= comment %>
<% } %>   *
<% api['params'].each { param -> %>   * @param <%= param['name'] %> <%= param['comments'].join('\n   * ') %>
<% } %>   * @return {Promise} A Promise for the Passport call.
   */
  <%= api['methodName'] %>: function(<%= api['params'].collect({ param -> param['name'] }).join(', ') %>) {
    return new Promise((resolve, reject) => {
      this._start()
          .uri('<%= api['uri'] %>')<% api['params'].each { param -> %><% if (param['type'] == 'urlSegment') { %>
          .urlSegment(<%= param['name'] %>)<% } else if (param['type'] == 'body') { %>
          .setJSONBody(<%= param['name'] %>)<% } %><% } %>
          .<%= api['method'] %>()
          .go(this._responseHandler(resolve, reject));
    },
<% } %>

  /* ===================================================================================================================
   * Private methods
   * ===================================================================================================================*/

  /**
   * Require a parameter to be defined, if null or un-defined this throws an exception.
   * @param {Object} value The value that must be defined.
   * @param {string} name The name of the parameter.
   * @private
   */
  _requireNonNull: function(value, name) {
    if (typeof value === 'undefined' || value === null) {
      throw new Error(name + ' parameter is required.');
    }
  },

  /**
   * Returns a function to handle the promises for each call.
   *
   * @param resolve The promise's resolve function.
   * @param reject The promise's reject function.
   * @returns {Function} The function that will call either the resolve or reject functions based on the ClientResponse.
   * @private
   */
  _responseHandler: function(resolve, reject) {
    return function(response) {
      if (response.wasSuccessful()) {
        resolve(response);
      } else {
        reject(response);
      }
    };
  },

  /**
   * creates a rest client
   *
   * @returns {RESTClient} The RESTClient that will be used to call.
   * @private
   */
  _start: function() {
    return new RESTClient().authorization(this.apiKey).setUrl(this.host);
  }
};

module.exports = PassportClient;