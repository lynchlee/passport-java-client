module Inversoft
  #
  # This class is the the Ruby client library for the Passport User Platform {https://www.inversoft.com/products/identity-user-management}
  #
  # Each method on this class calls one of the APIs for Passport. In most cases, the methods will take either a Hash, an
  # OpenStruct or any object that can be safely converted to JSON that conforms to the Passport API interface. Likewise,
  # most methods will return an OpenStruct that contains the response JSON from Passport.
  #
  # noinspection RubyInstanceMethodNamingConvention,RubyTooManyMethodsInspection,RubyParameterNamingConvention
  class PassportClient
    attr_accessor :api_key, :base_url, :connect_timeout, :read_timeout

    def initialize(api_key, base_url)
      @api_key = api_key
      @base_url = base_url
      @connect_timeout = 1000
      @read_timeout = 2000
    end

<% apis.each { api -> %>    #
<% api['comments'].each { comment -> %>    # <%= comment %>
<% } %>    #
<% api['params'].each { param -> %>    # @param <%= param['underscoreName'] %> [<%= param['rubyType'] %>] <%= param['comments'].join('\n    # ') %>
<% } %>    # @return [Inversoft::ClientResponse] When successful, the response will contain the log of the action. If there was
    #   a validation error or any other type of error, this will return the Errors object in the response. Additionally,
    #   if Passport could not be contacted because it is down or experiencing a failure, the response will contain an
    #   Exception.
    #
    def <%= api['underscoreMethodName'] %>(<%= api['params'].collect({ param -> param['underscoreName'] }).join(', ') %>)
      start.uri('<%= api['uri'] %>')<% api['params'].each { param -> %><% if (param['type'] == 'urlSegment') { %>
          .url_segment(<%= param['name'] %>)<% } else if (param['type'] == 'body') { %>
          .body_handler(Inversoft::JSONBodyHandler.new(request))<% } %><% } %>
          .<%= api['method'] %>()
          .go()
    end
<% } %>

    #
    # Starts the HTTP call
    #
    # @return [RESTClient] The RESTClient
    #
    private
    def start
      RESTClient.new
          .authorization(@api_key)
          .success_response_handler(Inversoft::JSONResponseHandler.new(OpenStruct))
          .error_response_handler(Inversoft::JSONResponseHandler.new(OpenStruct))
          .url(@base_url)
          .connect_timeout(@connect_timeout)
          .read_timeout(@read_timeout)
    end
  end
end

