<?php
namespace inversoft;

/*
 * Copyright (c) 2016-2017, Inversoft Inc., All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

class PassportClient
{
  /**
   * @var string
   */
  private \$apiKey;

  /**
   * @var string
   */
  private \$baseURL;

  /**
   * @var int
   */
  public \$connectTimeout = 2000;

  /**
   * @var int
   */
  public \$readTimeout = 2000;

  public function __construct(\$apiKey, \$baseURL)
  {
    include_once 'RESTClient.php';
    \$this->apiKey = \$apiKey;
    \$this->baseURL = \$baseURL;
  }

<% apis.each { api -> %>  /**
<% api['comments'].each { comment -> %>   * <%= comment %>
<% } %>   *
<% api['params'].each { param -> %>   * @param <%= param['phpType'] %> \$<%= param['name'] %> <%= param['comments'].join('\n   * ') %>
<% } %>   *
   * @return ClientResponse When successful, the response will contain the log of the action. If there was a
   *     validation error or any other type of error, this will return the Errors object in the response. Additionally,
   *     if Passport could not be contacted because it is down or experiencing a failure, the response will contain an
   *     Exception, which could be an IOException.
   */
  public function <%= api['methodName'] %>(<%= api['params'].collect({ param -> "\$${param['name']}" }).join(', ') %>)
  {
    return \$this->start()->uri("<%= api['uri'] %>")<% api['params'].each { param -> %><% if (param['type'] == 'urlSegment') { %>
        ->urlSegment(\$<%= param['name'] %>)<% } else if (param['type'] == 'body') { %>
        ->bodyHandler(new JSONBodyHandler(\$<%= param['name'] %>))<% } %><% } %>
        -><%= api['method'] %>()
        ->go();
  }
<% } %>

  private function start()
  {
    \$rest = new RESTClient();
    return \$rest->authorization(\$this->apiKey)
        ->url(\$this->baseURL)
        ->connectTimeout(\$this->connectTimeout)
        ->readTimeout(\$this->readTimeout)
        ->successResponseHandler(new JSONResponseHandler())
        ->errorResponseHandler(new JSONResponseHandler());
  }
}