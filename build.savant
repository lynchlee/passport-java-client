/*
 * Copyright (c) 2015-2017, Inversoft Inc., All Rights Reserved
 */
savantVersion = "1.0.0"

jackson5Version = "2.3.1"
javaErrorVersion = "2.2.0"
primeJWTVersion = "0.2.0"
restifyVersion = "3.1.4"

project(group: "com.inversoft.passport", name: "passport-java-client", version: "1.11.1", licenses: ["ApacheV2_0"]) {
  workflow {
    standard()
  }

  publishWorkflow {
    subversion(repository: "http://svn.inversoft.org/savant")
  }

  dependencies {
    group(name: "provided") {
      dependency(id: "javax.servlet:servlet-api:3.1.0", skipCompatibilityCheck: true)
    }
    group(name: "compile") {
      dependency(id: "com.inversoft:restify:${restifyVersion}")
      dependency(id: "com.inversoft:java-error:${javaErrorVersion}")
      dependency(id: "org.primeframework:prime-jwt:${primeJWTVersion}")
      dependency(id: "com.inversoft:jackson5:${jackson5Version}")
      dependency(id: "com.fasterxml.jackson.core:jackson-annotations:2.8.8")
      dependency(id: "com.fasterxml.jackson.core:jackson-core:2.8.8")
      dependency(id: "com.fasterxml.jackson.core:jackson-databind:2.8.8")
    }
    group(name: "test-compile") {
      dependency(id: "org.testng:testng:6.8.7")
    }
  }

  publications {
    standard()
  }
}

// Plugins
dependency = loadPlugin(id: "org.savantbuild.plugin:dependency:${savantVersion}")
java = loadPlugin(id: "org.savantbuild.plugin:java:${savantVersion}")
javaTestNG = loadPlugin(id: "org.savantbuild.plugin:java-testng:${savantVersion}")
file = loadPlugin(id: "org.savantbuild.plugin:file:${savantVersion}")
idea = loadPlugin(id: "org.savantbuild.plugin:idea:${savantVersion}")
release = loadPlugin(id: "org.savantbuild.plugin:release-git:${savantVersion}")
clientLibrary = loadPlugin(id: "com.inversoft.savant.plugin:client-library:0.2.1")

// Plugin settings
java.settings.javaVersion = "1.8"
javaTestNG.settings.javaVersion = "1.8"
clientLibrary.settings.debug = false

target(name: "clean", description: "Cleans the project") {
  java.clean()
}

target(name: "compile", description: "Compiles the project") {
  java.compile()
}

target(name: "jar", description: "JARs the project", dependsOn: ["compile"]) {
  java.jar()
}

target(name: "test", description: "Runs the project's tests", dependsOn: ["jar"]) {
  javaTestNG.test(groups: ["unit"])
}

target(name: "doc", description: "Generate the project's JavaDoc", dependsOn: ["jar"]) {
  java.document()
}

target(name: "int", description: "Releases a local integration build of the project", dependsOn: ["test"]) {
  dependency.integrate()
}

target(name: "list-unused-dependencies", description: "Lists the unused dependencies of the project", dependsOn: ["compile"]) {
  dependency.listUnusedDependencies()
}

target(name: "print-dependency-tree", description: "Prints the dependency tree") {
  dependency.printFull()
}

target(name: "release", description: "Releases a full version of the project", dependsOn: ["clean", "test"]) {
  release.release()
}

target(name: "idea", description: "Updates the IntelliJ IDEA module file") {
  idea.iml()
}

target(name: "bundle", description: "Builds the project release bundle", dependsOn: ["jar"]) {
  dependency.copy(to: "build/jars") {
    dependencies(group: "compile", transitive: false, fetchSource: true, transitiveGroups: ["compile"])
  }
  file.delete {
    fileSet(dir: "build/jars", includePatterns: [~/.+src\.jar/, ~/-test-/])
  }
  file.zip(file: "build/bundles/passport-java-client-${project.version}.zip") {
    fileSet(dir: "build/jars")
  }
}

target(name: "update-client", description: "Updates the client libraries using the JSON files") {
  clientLibrary.buildClient(template: "src/main/client/java.client.ftl", outputFile: "src/main/java/com/inversoft/passport/client/PassportClient.java")
  clientLibrary.buildClient(template: "src/main/client/php.client.ftl", outputFile: "../passport-php-client/src/PassportClient.php")
  clientLibrary.buildClient(template: "src/main/client/csharp.client.ftl", outputFile: "../passport-csharp-client/src/main/csharp/PassportClient.cs")
  clientLibrary.buildClient(template: "src/main/client/node.client.ftl", outputFile: "../passport-node-client/lib/PassportClient.js")
//  clientLibrary.buildClient(template: "src/main/client/python.client.ftl", outputFile: "../passport-python-client/src/main/python/com/inversoft/passport_client.py")
  clientLibrary.buildClient(template: "src/main/client/ruby.client.ftl", outputFile: "../passport-ruby-client/lib/inversoft/passport_client.rb")
}